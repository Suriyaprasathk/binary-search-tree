#include "stdio.h"
#include "stdlib.h"
struct node{
	int data;
	struct node *left,*right;
};
struct node *create(int x)
{
	struct node *newnode;
	newnode=(struct node*)malloc(sizeof(struct node));
	newnode->data=x;
	newnode->left=newnode->right=NULL;
}
struct node *insert(struct node*root,int x)
{
	if(root==NULL)
	{
		return create(x);
	}
	else if(x<root->data)
	{
		root->left=insert(root->left,x);
	}
	else
	{
		root->right=insert(root->right,x);
	}
 }
 void preorder(struct node*root)
 {
 	if(root==NULL)
 	{
 		return;
	}
	else
	 {
	 	printf("%d->",root->data);
	 	preorder(root->left);
	 	preorder(root->right);
	 }
  }
  
 void inorder(struct node *root)
 {
 	if(root==NULL)
 	{
 		return;
	}
	else
	 {
	 	inorder(root->left);
	 	printf("%d->",root->data);
	 	inorder(root->right);
	 }
}

 void postorder(struct node *root)
 {
 	if(root==NULL)
 	{
 		return;
	}
	else
	 {
	 	postorder(root->left);
	 	postorder(root->right);
	 	printf("%d->",root->data);
	 }
}
struct node *min(struct node *root)
{
	if(root->left!=NULL)
	{
		return root->left=min(root->left);
	}
	else
	{
		return root;
	} 
 } 
struct node *max(struct node *root)
{
	if(root->right!=NULL)
	{
		return root->right=max(root->right);
	}
	else
	{
		return root;
	}
}
struct node *del(struct node *root,int x)
{
	if(x>root->data)
	{
		root->right=del(root->right,x);
	}
	else if(x<root->data)
	{
		root->left=del(root->left,x);
	}
	else
	{
		if(root->left==NULL && root->right==NULL)
		{
			free(root);
			root=NULL;
			
		}
		else if (root->left==NULL || root->right==NULL)
		{
			struct node*temp;
			if(root->left==NULL)
			{
			temp=root->right;
			}
			if(root->right==NULL)
			{
			temp=root->left;
			}
			free(root);
			return temp;
		}
		else
		{
			struct node *temp=min(root->right);
			root->data=temp->data;
			temp->right=del(root->right,temp->data);			
		}
	}
	return root;
}
int main()
{
	struct node *root,*temp;
	root=NULL;
	int choice=1,x;
	while(choice){
	printf("\nenter 1 to insert\nenter 2 to display\npress 3 to quit\npress 4 to find minimum value\npress 5 to find maximum value\npress 6 to delete");
	printf("\nenter the choice\n");
	scanf("%d",&choice);
	switch(choice)
	{
	case 1:
		printf("\nenter the data:\n");
		scanf("%d",&x);
		root=insert(root,x);
		break;
	case 2:
		printf("inorder traversal\n");
		inorder(root);
		printf("\n");
		printf("preorder traversal\n");
		preorder(root);
		printf("\n");
		printf("postorder traversal\n");
		postorder(root);
		break;
	case 3:
		return choice=0;
		break;
	case 4:
		if(root==NULL)
		{
			printf("empty tree");
		}
		else
		{
			temp=min(root);
			printf("the minimum value is %d",temp->data);
			
		}
		break;
	case 5:
		if(root==NULL)
		{
			printf("empty tree");
		}
		else
		{
			temp=max(root);
			printf("the minimum value is %d",temp->data);
			
		}
		break;
	case 6:
		if(root==NULL)
		{
			printf("empty tree");
		}
		else
		{
			printf("\nenter the value to delete:\n");
			scanf("%d",&x);
			root=del(root,x);
		}
		
	default:
		printf("enter the valid choice");
		
}
}
}
