#include<stdio.h>
#include<stdlib.h>
struct node
{
	int data;
	struct node *left,*right;
};
struct node*create(int x)
{
	struct node*newnode=(struct node*)malloc(sizeof(struct node));
	newnode->data=x;
	newnode->left=newnode->right=NULL;
	return newnode;
}
struct node *insert(struct node *root,int x)
{
	if(root==NULL)
	return create(x);
	if(x>root->data)
	root->right=insert(root->right,x);
	else
	root->left=insert(root->left,x);
	return root;
}
void inorder(struct node *root)
{
	if(root==NULL) return;
	inorder(root->left);
	printf("%d->",root->data);
	inorder(root->right);
}

void postorder(struct node *root)
{
	if(root==NULL) return;
	postorder(root->right);
	postorder(root->left);
	printf("%d->",root->data);
}

void preorder(struct node *root)
{
	if(root==NULL) return;
	printf("%d->",root->data);
	preorder(root->left);
	preorder(root->right);
}
struct node *min(struct node *root)
{
	if(root->left!=NULL)
	{
		return root->left=min(root->left);
	}
	else
	{
		return root;
	}
}
struct node *max(struct node *root)
{
	if(root->right!=NULL)
	{
		return root->right=min(root->right);
	}
	else
	{
		return root;
	}
}
struct node *del(struct node *root,int x)
{
	if(root->data==NULL) 
	{
		return root;
	}
	else if(x>root->data)
	{
		root->right=del(root->right,x);
	}
	else if(x<root->data)
	{
		root->left=del(root->left,x);
	}
	else
	{
		if(root->left==NULL)
		{
			struct node*temp;
			temp=root->right;
			free(root);
			return temp;
		}
		else if(root->right==NULL)
		{
			struct node*temp;
			temp=root->left;
			free(root);
			return temp;
		}
			struct node*temp=min(root->right);
			root->data=temp->data;
			root->right=del(root->right,temp->data);
		
	}
	return root;
}

int main()
{
	struct node *root;
	root=NULL;
	int choice=1,x;
	while(choice!=6)
	{
		printf("\nenter 1 to insert\nenter 2 to delete\nenter 3 to display\nenter 4 to find the minimum value\nenter 5 to find the maximum value\nenter 6 to quit\n");
		printf("enter the choice");
		scanf("%d",&choice);
		switch(choice)
		{
			case 1:
				printf("\nenter the value to insert\n");
				scanf("%d",&x);
				root=insert(root,x);
				break;
			case 2:
				printf("enter the value to delete:\n");
				scanf("%d",&x);
				root=del(root,x);
			break;
			case 3:
			printf("\ninorder traversal:\n");
			inorder(root);
			printf("");
			printf("\npreorder traversal:\n");
			preorder(root);
			printf("");
			printf("\npostorder traversal:\n");
			postorder(root);
			break;
			case 4:
			if(root==NULL)
			{
				printf("tree is empty");
			}
			else
			{
				struct node *temp=min(root);
				printf("the minimum value is %d",temp->data);
			}	
			break;
			case 5:
			if(root==NULL)
			{
				printf("tree is empty");
			}
			else
			{
				struct node *temp=max(root);
				printf("the minimum value is %d",temp->data);
			}	
			break;
			case 6:
				return choice=0;
				break;
			default:
				printf("enter the valid input");
				break;

		}
	}
}
